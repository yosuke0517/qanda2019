# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1
jobs:
  checkout_code:
    docker:
      - image: circleci/ruby:2.6.1
    working_directory: ~/myapp
    steps:
      - checkout
      - save_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/myapp

  bundle_dependencies:
    docker:
      - image: circleci/ruby:2.6.1
      - image: circleci/mysql:5.7
    working_directory: ~/myapp
    steps:
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - restore_cache:
          key: v1-bundle-{{ checksum "Gemfile.lock" }}
      - run: bundle install --path vendor/bundle
      - save_cache:
          key: v1-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/myapp/vendor/bundle
  test:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.6.1
        environment:
          RAILS_ENV: test
      - image: mysql:5.7
        environment:
           - MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
           - MYSQL_ROOT_HOST: '%'

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      - run:
          name: Setup Yarn
          command: |
            sudo apt-get install yarn

      - run: mv config/database.yml.ci config/database.yml

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load

      - run:
          name: install chromedriver and latest chrome
          command: |
            sudo apt-get update
            sudo apt-get install chromedriver
            sudo apt install libappindicator3-1
            sudo apt-get install lsb-release
            curl -L -o google-chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo dpkg -i google-chrome.deb
            sudo sed -i 's|HERE/chrome\"|HERE/chrome\" --disable-setuid-sandbox|g' /opt/google/chrome/google-chrome
            rm -f google-chrome-stable_current_amd64.deb

      # run tests!
      - run:
          name: run tests
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
  deploy:
    docker:
      - image: circleci/python
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install aws
          command: |
            sudo pip install awscli
            aws --version
      - run:
          name: Install ecs-deploy
          command: |
            curl https://raw.githubusercontent.com/silinternational/ecs-deploy/master/ecs-deploy | sudo tee -a /usr/bin/ecs-deploy
            sudo chmod +x /usr/bin/ecs-deploy
      - run:
          name: Install jq
          command: sudo apt-get install -y jq
      - run:
          name: "Log in to AWS ECR"
          command: eval $(aws ecr get-login --no-include-email --region ap-northeast-1)
      - run:
          name: "Build & Push Docker Image"
          command: |
            docker build -t $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-1.amazonaws.com/${REPO_PREFIX}:latest -t $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-1.amazonaws.com/qanda2019:$CIRCLE_SHA1 -f Dockerfile_PRO --build-arg RAILS_MASTER_KEY=${RAILS_MASTER_KEY}.
            docker push $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-1.amazonaws.com/${REPO_PREFIX}:$CIRCLE_SHA1
      - run:
          name: "DB Migrate"
          command: |
            aws ecs run-task \
              --region ${AWS_DEFAULT_REGION} \
              --cluster ${REPO_PREFIX}-cluster \
              --task-definition ${REPO_PREFIX}-task:2 \
              --overrides file://ecs/run_task_db_migrate.json
      - run:
          name: "Sevice deploy"
          environment:
          command: |
            ecs-deploy -c ${REPO_PREFIX}-cluster -n ${REPO_PREFIX}-service \
              -r ap-northeast-1 -t 240 \
              -i $AWS_ACCOUNT_ID.dkr.ecr.ap-northeast-1.amazonaws.com/${REPO_PREFIX}:$CIRCLE_SHA1
workflows:
  version: 2.1
  test_and_deploy:
    jobs:
      - checkout_code
      - test:
          requires:
            - checkout_code
      - deploy:
          requires:
            - test
          filters:
            branches:
              only: master
